<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App with AI</title>
    <!-- <link rel="stylesheet" href="./style/n.css"> -->
    <style>
body {
    margin: 0;
    padding: 0;
    font-family: 'Arial', sans-serif;
    color: #fff;
    background-color: #1c1c1c;
}

#ContainerForChatApp {
    background-color: #5a16b9;
    position: fixed;
    width: 100%;
    height: 100%;
    display: flex;
}

#Sections_1 {
    background-color: #60dcff;
    width: 25%;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
}
#Sections_1 .User {
    width: 100%;
    display: flex;
    margin-bottom: 20px;
}

#Sections_1 .User input {
    flex-grow: 1;
    padding: 10px;
    border: 2px solid #36d3ff;
    border-radius: 5px 0 0 5px;
    background-color: #fff;
    color: #000;
}

#Sections_1 .User button {
    padding: 10px;
    border: none;
    border-radius: 0 5px 5px 0;
    background-color: #36d3ff;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s;
}

#Sections_1 .User button:hover {
    background-color: #00c8ff;
}

#Sections_1 .ACCAll {
    width: 100%;
    height: auto;
    overflow-x:hidden ;
    padding: 20px;
    background-color: #590ba6;
    display: grid;
    align-items: center;
    color: #fff;
    border-radius: 10px;
    margin-bottom: 20px;
}
#Sections_1 .oneAccount {
    display: flex;
    padding: 10px;
    height: 50px;
    border: 1px solid transparent;
    border-top: 1px solid white;
    transition: all 200ms ease;
}
#Sections_1 .oneAccount:hover {
background-color: #00000075;
box-shadow: 0 0 5px 0.1rem black;
border-radius: 5px;
transform: translate(0,-10px);
}
#Sections_1 .oneAccount div{
    margin-top: 20px;
}
#Sections_1 .oneAccount span {
    display: inline-block;
    width: 50px;
    height: 50px;
    background-color: #000080;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
    font-size: 24px;
    background-attachment: local;
    overflow: hidden;
    background-size: cover;
    justify-content: center;
    font-size: 24px;
}
#Sections_1 .oneAccount span img{
    width: 100%;
    height: 100%;
    background-attachment: fixed;
    background-color: #000080;
    align-items: center;
    margin: auto;
}
#Section_Commitment {
    background-color: #501a7f;
    width: 50%;
    display: flex;
    flex-direction: column;
    padding: 10px;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
}
@media (width<300px) {
    #ContainerForChatApp{
        display: none;
    }
}
.firsts1{
    display: inline;
    height: 80%;
}
.firsts2{
    top: 0;
    height: 100px;
    position: fixed;
    width: 47%;
    height: 70px;
    margin-left: -9px;
    background-color: #37c0f2;
    /* box-shadow: 0 1px 10px  #00c8ff; */
}
.TopCorner{
background-color: transparent;
width: 100%;
height: 100%;
z-index: 1;
display: flex;
}
.TCcontener{
display: flex;
}
.TCButtonCont09{
    display: none;
}
.TCcontener .TCButtonCont{

    width: 60px;
    height: 100%;
    background-color: transparent;
}
.TCcontener .TCButtonCont .TCButton{
    width: 40px;
    height: 40px;
    border-radius: 100%;
    background-color: rgb(24, 139, 211);
    margin: 5px;
    font-weight: 1000;
    font-weight: bolder;
    font-size: xx-large;
    text-align: center;
    padding: 5px;
    cursor: pointer;
}
.TCcontener .TCButtonCont .TCButton:hover{
    background-color: rgb(16, 148, 177);
}
.TCcontener .TcImgTextCont {
    width: max-content;
    height: 100%;
    background-color: transparent;
    display: flex;
    padding-right: 5px;
}
.TCcontener .TcImgTextCont .TCImgCont{
    display: inline-block;
    width: 50px;
    height: 50px;
    background-color: #2424bc;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 6px;
    font-size: 24px;
    background-attachment: local;
    overflow: hidden;
    background-size: cover;
    justify-content: center;
    font-size: 24px;
}
.TCcontener .TcImgTextCont .TCImgCont img{
    width: 50px;
    height: 50px;
    background-color: black;
    box-shadow: 0 0 1px 0.1rem black;
    border: 1px solid white;
    border-radius: 100%;
}
.TCcontener .TcImgTextCont .TCTexCont {
    min-width: 100px;
    max-width: min-content;
    padding: 5px;
    font-weight: bolder;
    font-size: large;
    height: 25px;
    border-radius: 5px;
    background-color: #00c8ff;
    margin-top: 20px;
}
.MessDisplay {
    flex-grow: 2;
    overflow-y: scroll;
    padding: 10px;
    height: 100%;
    border: 2px solid #fff;
    background-color: rgba(132, 32, 255, 0.767);
    border-radius: 10px;
    margin-bottom: 10px;
}
.UserMessage {
    min-width: 45%;
    width: 50%;
    max-width: 80%;
    padding: 10px;
    margin-top: 10px;
    margin-bottom: 20px;
    margin-left: 10px;
    display: flex;
    font-weight: normal;
    color: white;
    font-family: 'Arial', sans-serif;
    box-shadow: 0 0 2px 1px rgba(49, 49, 49, 0.863);
    min-height: 30px;
    background-color: #47474781;
    border: 1px solid transparent;
    border-radius: 10px;
    border-bottom-left-radius: 0;
    animation: ws 400ms linear;
}

audio{
    position: relative;
    z-index: 0;
}
@keyframes ws {
    0%{
        opacity: 0.2;
        transform: translate(0rem,40rem);
    }
    100%{
        transform: translate(0rem,0);
    }
}
#outputDiv {
    margin-top: 20px;
    font-size: 24px;
    color: #333;
    font-family: Arial, sans-serif;
    display: inline-block; /* Display the text inline */
    white-space: pre-wrap; /* Preserve spaces and wrap text */
    position: relative;
}
/* Cursor */
.cursor {
    display: inline-block;
    width: 20px;
    height: 20px;
    border-radius: 20px;
    background-color: white;
    transition: all 100ms ease-in-out;
    box-shadow: -1px 0px 1px white;
    margin-top: 2px;
    margin-left: 2px;
    /* animation: blink 0.7s infinite; */
    vertical-align: bottom; /* Align cursor with text */
}
.cursor_t {
    display: inline-block;
    height: 1.2rem;
    width: 0.6rem;
    border-radius: 10px;
    /* border-radius: 20px; */
    background-color: rgb(255, 255, 255);
    margin-top: 2px;
    margin-left: -2px;
    animation: blink 0.2s infinite;
    vertical-align: bottom; /* Align cursor with text */
}

@keyframes blink {
    0% { opacity: 1; }
    50% { opacity: 0; }
    100% { opacity: 1; }
}
.RobotMessage {
    min-width: 45%;
    width: 50%;
    max-width: 80%;
    text-align: left;
    padding: 10px;
    margin: auto;
    font-weight: normal;
    color: white;
    font-family: 'Arial', sans-serif;
    box-shadow: 0 0 2px 1px rgba(69, 69, 69, 0.863);
    min-height: 30px;
    background-color: #51258e81;
    border: 1px solid transparent;
    border-radius: 10px;
    border-bottom-right-radius: 0;
    align-self: flex-end;
    margin-right: 10px;
    animation: w 400ms linear;
    margin-top: 10px;
}
@keyframes w {
    0%{
        opacity: 0.2;
        transform: translate(0rem,10rem);
    }
    100%{
        transform: translate(0rem,0);
        /* transform: rotate(10deg); */
    }
}
#UserAreaMessage {
    display: flex;
    align-items: center;
    border-top: 2px solid #fff;
    padding: 10px;
    background-color: rgba(29, 240, 255, 0.886);
    border-radius: 10px;
}
button:disabled{
    background-color: transparent;
}

#UserAreaMessage textarea {
    flex-grow: 1;
    padding: 10px;
    border: none;
    background-color: transparent;
    color: #fff;
    font-size: 16px;
    resize: none;
} 

#UserAreaMessage button {
    padding: 10px;
    border: none;
    background-color: transparent;
    font-size: 24px;
    color: #fff;
    cursor: pointer;
    transition: color 0.3s;
}

#UserAreaMessage button:hover {
    color: #000;
}

#Section_Setting {
    background-color: #6b15fe;
    width: 25%;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
}

#Section_Setting .Section_s_button {
    padding: 5px;
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
    width: 100%;
}

#Section_Setting .Section_s_button button {
    background: rgba(36, 36, 36, 0.534);
    border-radius: 5px;
    padding: 5px 10px;
    border: none;
    color: #fff;
    cursor: pointer;
    transition: background 0.3s;
}

#Section_Setting .Section_s_button button:hover {
    background: rgba(36, 36, 36, 0.8);
}

#Section_Setting #Change {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    font-weight: bolder;
    background-color: #00000032;
    border: 1px solid transparent;
    width: 90%;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 1px 0.5rem 0 rgba(60, 60, 60, 0.708);
}

#Section_Setting #Change input {
    margin-top: 20px;
    padding: 10px;
    border-radius: 5px;
    font-family: 'Arial', sans-serif;
    text-align: center;
    font-weight: bolder;
    border: 1px solid transparent;
    width: 100%;
}

#Section_Setting #Change span {
    width: 50px;
    overflow: hidden;
    height: 50px;
    border-radius: 100%;
}
.ContainerForChck{
    margin: 5px;
width: 100%;
min-width: 100px ;
border: none;
background-color: #0000006b;
padding: 10px;
gap: 10px;
display: grid;
border-radius: 10px;
box-shadow: 0 1px 0.5rem 0 rgba(31, 31, 31, 0.708);
}
#Tran{
    font-weight: bolder;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    margin-top: 5px;
width: 70%;
text-align: center;
min-width: 100px ;
border: none;
background-color: #0000006b;
padding: 10px;
gap: 10px;
display: grid;
border-radius: 10px;
box-shadow: 0 1px 0.5rem 0 rgba(31, 31, 31, 0.708);
}
#Tran .form{
min-width: 100px;
max-width: 200px;
}
#Tran button{
    color: white;
    font-weight: bolder;
    /* background-color: #212121d1; */
    margin: 10px;
    padding: 10px;
    background: linear-gradient(2deg,rgb(12, 106, 107),transparent);
    border-radius: 5px;
    transition: all 500ms ease-in-out;
    border: none;
}
#Tran button:hover{
    background: linear-gradient(60deg,transparent,rgb(12, 106, 107));
    border: none;
}
#Tran button:active{
    background-color: rgb(12, 106, 107);
}
.ContainerForChck .ChckDiv{
    padding: 5px;
    display: flex;
    background-color: #0000004a;
    border-radius: 5px;
    box-shadow:  0 1px 0.3rem 0 rgba(31, 31, 31, 0.708);
    transition: all 200ms ease-in-out;
}
.ContainerForChck .ChckDiv:hover{
transform: translate(0,-0.1rem);
background-color: #9234e48e;
}
.ContainerForChck .ChckDiv span{
    width: 50px;
    height: 50px;
    background-color: black;
    /* box-shadow: 0 0 1px 0.1rem black; */
    border: none;
    border-radius: 100%;
    text-align: center;
    font-weight: bolder;
    font-size: xx-large;
}
.ContainerForChck .TextChck{
    margin-left: 15px;
    margin-top: 10px;
}
.ContainerForChck .SencondChckButonDiv{
    text-align: center;
    /* display: flex; */
    gap: 10px;
}
.ContainerForChck .SencondChckButonDiv button{
    color: white;
    font-weight: bolder;
    background-color: #212121d1;
    margin: 10px;
    transition: all 200ms ease-in-out;
}

#Section_Setting #Change span img {
    width: 50px;
    height: 50px;
    background-color: black;
    box-shadow: 0 0 1px 0.1rem black;
    border: 1px solid white;
    border-radius: 100%;
}

#Section_Setting #Change input[type='file'] {
    margin-top: 20px;
    padding: 5px;
    border-radius: 5px;
    font-family: 'Arial', sans-serif;
    text-align: center;
    font-weight: bolder;
    background: linear-gradient(90deg, rgba(0, 0, 0, 0.628), transparent);
    border: none;
    margin-bottom: 10px;
}

#Section_Setting #Change button {
    padding: 10px 20px;
    border-radius: 5px;
    border: 1px solid transparent;
    cursor: pointer;
    font-weight: bolder;
    background-color: #000;
    color: white;
    transition: all 200ms ease-in-out;
}

#Section_Setting #Change button:hover {
    background: linear-gradient(0deg, transparent, black);
    border: none;
}

.MessDisplay::-webkit-scrollbar {
    width: 6px;
    background: transparent;
}

.MessDisplay::-webkit-scrollbar-thumb {
    background-color: #36d3ff;
    border-radius: 10px;
}

.MessDisplay::-webkit-scrollbar-track {
    background-color: #36d3ff;
    border-radius: 1px;
}

 .nu89{
    animation: nuls 100ms linear infinite;
    transition: all 200ms ease-in-out;
    position: relative;
    background:linear-gradient(90deg, );
}
@keyframes nuls {
    0%{
        transform:translate(0,-0.5rem);
    }
    50%{
        transform:translate(0,0.5rem);
    }
    100%{
        transform:translate(0,-0.5rem);

    }
}
    </style>
    <style>
body {  background-color: #1c1c1c;}#ContainerForChatApp {    background-color: #00ffc8;}#Sections_1 {    background-color: #00ff73;}#Sections_1 .User button {    background-color: #36d3ff;}#Sections_1 .User button:hover {    background-color: #00c8ff;}#Sections_1 .ACCAll {    background-color: #0fd7c6;}#Sections_1 .oneAccount:hover {background-color: #0ac963d0;}#Sections_1 .oneAccount span {    background-color: #00e4af;}#Section_Commitment {    background-color: #009dd7;}.MessDisplay {    background-color: rgba(4, 200, 118, 0.767);}.UserMessage {    background-color: #0072c381;}.RobotMessage {    background-color: #51258e81;}#UserAreaMessage {    background-color: rgba(29, 255, 191, 0.886);}#UserAreaMessage button:hover {    color: #00000092;}#Section_Setting {    background-color: #15fe9d;}#Section_Setting #Change {       background-color: #08131131;  }.ContainerForChck{background-color: #2bfbaf48;}.ContainerForChck .ChckDiv{    background-color: #34b1ff4a;}.ContainerForChck .ChckDiv:hover{background-color: #34e4a68e;}.ContainerForChck .ChckDiv span{    background-color: rgb(0, 249, 158);}#Section_Setting #Change button {    background-color: #1b554d;}.MessDisplay::-webkit-scrollbar-thumb {    background-color: #3679ff;}.MessDisplay::-webkit-scrollbar-track {    background-color: #00ff99;}`

    </style>
    <style>

@media (width < 671px) {

#Sections_1.div_visible{
    display: none;
}
#Sections_1.divVisible{
  display: block;
  width: 100%;
  height: 100%;
  padding: 5px;
}
#Section_Commitment.divVisible{
    display: block;
    width: 100%;
    /* height: 100%; */
    /* overflow: scroll; */
}
#Section_Commitment.divVisible .firsts2{
    width: 100%;
    height: 10%;
    padding: 5px;
}

.TCButtonCont09{
    display: block;
    border-radius: 100%;
    /* font-size: xx-large; */
    width: min-content;
    height: min-content;
}

#Section_Commitment.divVisible .firsts1{
    width: 100%;
    height: min-content;
}
#Section_Commitment.divVisible .firsts1 .MessDisplay{
    padding-top: 10%;
    height: 75%;
}
#Section_Commitment.divVisible .firsts1 .UserAreaMessage{
    height: 20%;
}
#Section_Commitment.div_visible{
    display: none;
}
#Section_Setting.divVisible{
    display: block;
    width: 100%;
    height: 100%;
}
#Section_Setting.div_visible{
    display: none;
}

/* Reset & Base Styles */
body {
margin: 0;
padding: 0;
font-family: 'Arial', sans-serif;
color: #fff;
background-color: #1c1c1c;
}

/* Container Layout */
#ContainerForChatApp {
display: flex;
height: 100vh;
width: 100%;
background-color: #3f3f3f;
}

/* Sections Styling */
#Sections_1, #Section_Commitment, #Section_Setting {
padding: 20px;
box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
}
.TCButtonCont09.ioni9{
display: block;
border-radius: 100%;
/* font-size: xx-large; */
position: fixed;
margin:auto;
/* top: 0; */
right: 0;
bottom: 0;
width: min-content;
padding: 5px;
margin: 20px;
height: min-content;
background-color: white;
border-radius: 50px;
box-shadow: 0 0 6px 2px rgb(122, 122, 122);
}
#Sections_1 {
width: 25%;
background-color: #2c3e50;
display: flex;
flex-direction: column;
align-items: center;
justify-content: space-between;
}

#Section_Commitment {
width: 50%;
background-color: #34495e;
display: flex;
flex-direction: column;
justify-content: space-between;
}

#Section_Setting {
width: 25%;
background-color: #2c3e50;
display: flex;
flex-direction: column;
align-items: center;
}

/* User Search & Account Display */
.User {
width: 100%;
display: flex;
margin-bottom: 20px;
}

.User input {
flex-grow: 1;
padding: 10px;
border: 2px solid #2980b9;
border-radius: 5px 0 0 5px;
background-color: #ecf0f1;
color: #000;
}

.User button {
padding: 10px;
border: none;
border-radius: 0 5px 5px 0;
background-color: #2980b9;
color: #fff;
cursor: pointer;
transition: background-color 0.3s;
}

.User button:hover {
background-color: #3498db;
}

.ACCAll {
width: 100%;
padding: 10px;
background-color: #2980b9;
border-radius: 10px;
color: #fff;
display: flex;
flex-direction: column;
}

.oneAccount {
display: flex;
align-items: center;
padding: 10px;
margin-bottom: 10px;
border-radius: 5px;
background-color: #34495e;
transition: background-color 0.3s, transform 0.3s;
}

.oneAccount:hover {
background-color: #3c6382;
transform: translateY(-5px);
}

.oneAccount span {
width: 50px;
height: 50px;
border-radius: 50%;
background-color: #2c3e50;
display: flex;
align-items: center;
justify-content: center;
margin-right: 10px;
}

.oneAccount span img {
width: 100%;
height: 100%;
border-radius: 50%;
}

/* Chat Area */
.firsts2 {
background-color: #3498db;
padding: 10px;
border-radius: 10px;
color: #fff;
}

.firsts1 {
flex-grow: 1;
overflow-y: auto;
margin-top: 10px;
padding: 10px;
background-color: #ecf0f1;
border-radius: 10px;
color: #2c3e50;
}

.MessDisplay {
overflow-y: auto;
padding: 10px;
background-color: #2c3e50;
border-radius: 10px;
color: #ecf0f1;
max-height: 70%;
}

.UserMessage, .RobotMessage {
padding: 10px;
margin: 10px 0;
border-radius: 10px;
}

.UserMessage {
background-color: #2980b9;
align-self: flex-start;
}

.RobotMessage {
background-color: #8e44ad;
align-self: flex-end;
text-align: left;
}

/* Input Area */
#UserAreaMessage {
display: flex;
align-items: center;
padding: 10px;
background-color: #3498db;
border-radius: 10px;
}

#UserAreaMessage textarea {
flex-grow: 1;
padding: 10px;
border: none;
border-radius: 5px;
background-color: #ecf0f1;
color: #2c3e50;
resize: none;
}

#UserAreaMessage button {
padding: 10px;
border: none;
background-color: #2980b9;
color: #fff;
cursor: pointer;
border-radius: 5px;
margin-left: 10px;
transition: background-color 0.3s;
}

#UserAreaMessage button:hover {
background-color: #3498db;
}

/* Scrollbar Styling */
.MessDisplay::-webkit-scrollbar {
width: 8px;
}

.MessDisplay::-webkit-scrollbar-thumb {
background-color: #3498db;
border-radius: 10px;
}

/* Responsive Layout */

} 

    </style>
</head>
<body>
    <div class="AllOne">
        
        <div id="ContainerForChatApp">
        </div>
    </div><!-- End ContainerForChatApp -->
    <script >
        const Conversations = {
    "Hamza":[]
}
    </script>
    <script>
        const UserAccounts = {
    "Hamza":{Name:"Hamza",img:'s'},
}
const ReverseAccounts = {

}
const Account_textes = {
    "@Hamza":['wonder']
}
console.log(Account_textes)
const Xstore = {
    'A': [ '1' ], 'B': [ '10' ], 'C': [ '11' ], 'D': [ '100' ], 'E': [ '101' ], 'F': [ '110' ], 'G': [ '111' ], 'H': [ '1000' ], 'I': [ '1001' ], 'J': [ '1010' ], 'K': [ '1011' ], 'L': [ '1100' ], 'M': [ '1101' ], 'N': [ '1110' ], 'O': [ '1111' ], 'P': [ '10000' ], 'Q': [ '10001' ], 'R': [ '10010' ], 'S': [ '10011' ], 'T': [ '10100' ], 'U': [ '10101' ], 'V': [ '10110' ], 'W': [ '10111' ], 'X': [ '11000' ], 'Y': [ '11001' ], 'Z': [ '11010' ], ',': [ '11011' ], '.': [ '11100' ], '/': [ '11101' ], '"': [ '11110' ], ';': [ '11111' ], ':': [ '100000' ], '[': [ '100001' ], ']': [ '100010' ], '<': [ '100011' ], '>': [ '100100' ], '?': [ '100101' ], '"': [ '100110' ], '|': [ '100111' ], '{': [ '101000' ], '}': [ '101001' ], '(': [ '101010' ], ')': [ '101011' ], '+': [ '101100' ], '=': [ '101101' ], '-': [ '101110' ], '_': [ '101111' ], '*': [ '110000' ], '&': [ '110001' ], '^': [ '110010' ], '%': [ '110011' ], '$': [ '110100' ], '#': [ '110101' ], '@': [ '110110' ], '!': [ '110111' ], "'": [ '111000' ], ' ': [ '0' ], '1': [ '111001' ], '2': [ '111010' ], '3': [ '111011' ], '4': [ '111100' ], '5': [ '111101' ], '6': [ '111110' ], '7': [ '111111' ], '8': [ '1000000' ], '9': [ '1000001' ], '0': [ '1000010' ], '~': [ '1000011' ], '`': [ '1000100' ], 'a': [ '1000101' ], 'b': [ '1000110' ], 'c': [ '1000111' ], 'd': [ '1001000' ], 'e': [ '1001001' ], 'f': [ '1001010' ], 'g': [ '1001011' ], 'h': [ '1001100' ], 'i': [ '1001101' ], 'j': [ '1001110' ], 'k': [ '1001111' ], 'l': [ '1010000' ], 'm': [ '1010001' ], 'n': [ '1010010' ], 'o': [ '1010011' ], 'p': [ '1010100' ], 'q': [ '1010101' ], 'r': [ '1010110' ],'s':['1011100'],'t':['1011101'],'u':['1011110'], 'v': [ '1010111' ], 'w': [ '1011000' ], 'x': [ '1011001' ], 'y': [ '1011010' ], 'z': [ '1011011' ]
};
const XreverseStore = Object.fromEntries(
    Object.entries(Xstore).map(([key, value]) => [value, key])
);
function changeToBinary(text) {
    return text.split('').map(char => Xstore[char] || '').join(' ');
}
function changeFromBinary(binaryText) {
    return binaryText.trim().split(' ').map(bin => XreverseStore[bin] || '').join('');
}
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
    const FNAME = [];
    let IsAnswering = false;
    function generateUniqueId() {
        // Generate a random UUID
        return Math.random().toString(36).substr(2, 9);
    }
    
    function checkAndAddSpaces(text, maxLength) {
        let result = '';
        let currentPosition = 0;
    
        while (currentPosition < text.length) {
            // Get the next chunk, ensuring we don't break a word
            let nextChunk = text.substring(currentPosition, currentPosition + maxLength);
    
            // Check for spaces before maxLength
            let spaceIndex = nextChunk.lastIndexOf(' ');
    
            if (spaceIndex === -1 && nextChunk.length === maxLength) {
                // No space in the chunk and it reaches maxLength, so check for the next space in the text
                let fullTextRemaining = text.substring(currentPosition);
                let nextSpaceAfterChunk = fullTextRemaining.indexOf(' ');
    
                if (nextSpaceAfterChunk === -1 || nextSpaceAfterChunk > maxLength) {
                    // If no space exists or the next space is beyond maxLength, force a break after maxLength
                    result += nextChunk + ' ';
                    currentPosition += maxLength;
                } else {
                    // If a space is nearby, move up to that space
                    result += fullTextRemaining.substring(0, nextSpaceAfterChunk + 1);
                    currentPosition += nextSpaceAfterChunk + 1;
                }
            } else if (spaceIndex !== -1) {
                // There's a space within the chunk, respect that and move on
                result += nextChunk.substring(0, spaceIndex + 1);
                currentPosition += spaceIndex + 1;
            } else {
                // This is the last part of the text (less than maxLength characters)
                result += nextChunk;
                currentPosition += nextChunk.length;
            }
        }
    
        return result.trim(); // Remove any trailing spaces
    }
    function T_animation(nots,divs,bool,nme,inht) {
        let index = 0;
        let disk = '';
        let wonderfull = 1000;
        const cursor = document.createElement("span-1");
        if (bool == false) {
            cursor.classList.add("cursor_t")
        }
        else {
        cursor.classList.add('cursor')
        }
        const audiomp3 = document.getElementById("wavsesnav")

        // const n90 = (nots.length > 90 ? (nots.length/2 > 150 ? 50 : nots.length/2) : (nots.length*90 > 100 ? nots.length : 50))
        const interval = setInterval(function () {
            let = (wonderfull > 0 ? wonderfull -= 70 : wonderfull)
            if (index < nots.length) {
                if (wonderfull >= 0) {
                if (nots[ index ] !== ' ') {
                    try {
                        audiomp3.play();
                    } catch (error) {
                        console.log('error')
                    }
                }
                }
                divs.innerHTML += nots[ index ];
                disk += nots[ index ];
                divs.textContent = disk;
                addHtml(divs, cursor);
                index++;
                if (bool == true) {
                    messageDisplay.scrollTop = messageDisplay.scrollHeight;
                }
            }
            else {
                RHtml(divs,cursor)
                try {
                    Conversations[ nme ].push(inht.innerHTML);
                } catch (error) {
                    console.warn('Server+'+' ADD')
                }
                clearInterval(interval);
            }
            // audiomp3.stop();
        }, 70)
    }
    function generatoColor(){
        return '#'+Math.floor(Math.random()*16777215).toString(16);
      }
    const container = document.getElementById('ContainerForChatApp');
            container.textContent = '';
            const containerStyle = document.createElement("style");
addHtml(container, containerStyle); 
const curuntclickStore = [];
            const CuruntClick = [];
    let x = 0;
    const Convers_StepShow = false;
    // Function to add an HTML element
    function addHtml(parent, element) {
        parent.appendChild(element);
        return element;
    }
    function RHtml(parent, element) {
        try {
            parent.removeChild(element);
        return element;
        } catch (error) {
            console.info('removed')
        }
            }
    // Section 1 - User section
    const section1 = document.createElement('div');
section1.id = 'Sections_1';
section1.classList.add("divVisible")
    const an89 = document.createElement("audio");
    an89.id = 'wavsesnav'
    an89.src = '/chatGpt/pleasant_keyboard_click_sound_50ms.wav'
    addHtml(container, section1);
    addHtml(container , an89 )
    const userDiv = document.createElement('div');
    userDiv.classList.add('User');
    addHtml(section1, userDiv);

    const searchInput = document.createElement('input');
    searchInput.id = 'SearchForAccounts';
    searchInput.placeholder = 'Search...';
    searchInput.type = 'search';
    addHtml(userDiv, searchInput);

    const searchButton = document.createElement('button');
searchButton.textContent = 'Search';
const adubutton = document.createElement('button');
adubutton.textContent = '+';
adubutton.classList.add("TCButtonCont09")
adubutton.classList.add("ioni9");
adubutton.style = 'background: blue; color: white; font-weight:bolder; font-size: larger;border-radius:100%; height:50px;width:50px;'

addHtml(userDiv, searchButton);
    addHtml(userDiv, adubutton);
    
const accountS = document.createElement("div")
    accountS.classList.add("ACCAll")
    // const accountDiv = document.createElement('div');
    // accountDiv.classList.add('oneAccount');
    addHtml(section1,accountS)
    // addHtml(accountS, accountDiv);

    // const accountSpan = document.createElement('span');
    // accountSpan.textContent = 'A';
    // addHtml(accountDiv, accountSpan);

    // const accountText = document.createElement('div');
    // accountText.classList.add('text');
    // accountText.textContent = 'Account Name';
    // addHtml(accountDiv, accountText);

    // Section 2 - Chat section
    const section2 = document.createElement('div');
section2.id = 'Section_Commitment';
section2.classList.add("div_visible")
    const section2_1 = document.createElement("div");
    section2_1.classList.add("firsts2")


    const section2_2 = document.createElement("div");
    section2_2.classList.add("firsts1")


    const messageDisplay = document.createElement('div');
    messageDisplay.addEventListener("scroll", function () {
        IsAnswering = false;
    })
    //1,2,3,4:5,span,text
    const s2upper = document.createElement('div');//to of all upper
    s2upper.classList.add("TopCorner");
    const s2uppers = document.createElement('div');//second of all upper
    s2uppers.classList.add("TCcontener");
    s2uppers.id = 'TCcon';
    const s2upperb = document.createElement('div');//first back button upper
    s2upperb.classList = ("TCButtonCont TCButtonCont09");
            
    const s2upperback = document.createElement('div');//first back button place upper
    s2upperback.classList.add("TCButton");
    s2upperback.textContent = '↩';
    const s2uppert = document.createElement('div');// upper text img place
    s2uppert.classList.add("TcImgTextCont");

    const s2upperimg = document.createElement('span');//upper img place
    s2upperimg.classList.add("TCImgCont")
    s2upperimg.id = 'curucntclickImg';

    const s2uppertext = document.createElement('text');//upper tex place
    s2uppertext.classList.add("TCTexCont");
    s2uppertext.id = 'curucntclickID';

    addHtml(container, section2);
    addHtml(section2, section2_1);
    addHtml(section2, section2_2);
     addHtml(section2_1,s2upper)
      addHtml(s2upper, s2uppers);
       addHtml(s2uppers, s2upperb);
        addHtml(s2upperb, s2upperback);
      addHtml(s2uppers, s2uppert);
       addHtml(s2uppert, s2upperimg);
       addHtml(s2uppert, s2uppertext);
     

    const t = document.createElement("h2");
    t.textContent = "Select Account To Communicate With Him";
    addHtml(section2,t)
    // Section 3 - Settings section
    const section3 = document.createElement('div');
section3.id = 'Section_Setting';
section3.classList.add("div_visible")

    addHtml(container, section3);
adubutton.addEventListener("click", function () {
    s1tos3()
})
function s1tos2() {
    //divVisible
    //div_visible
    section1.classList = '';
    section2.classList = '';
    section1.classList.add("div_visible")
    section2.classList.add("divVisible")

}
function s1tos3(){
    section1.classList = '';
    section3.classList = '';
    section1.classList.add("div_visible")
    section3.classList.add("divVisible")
}
function s3tos1(){
    section1.classList = '';
    section3.classList = '';
    section1.classList.add("divVisible");
    section3.classList.add("div_visible");

}
function s2tos1(){
    section1.classList = '';
    section2.classList = '';
    section1.classList.add("divVisible");
    section2.classList.add("div_visible");
    section2_2.innerHTML = '';
    s2upperimg.innerHTML = '';
    s2uppertext.textContent = '';
    CuruntClick.pop()
}
    const settingsButtonDiv = document.createElement('div');
    settingsButtonDiv.classList.add('Section_s_button');
    addHtml(section3, settingsButtonDiv);
const backbutton = document.createElement("button");
backbutton.classList.add("TCButtonCont09");
backbutton.textContent = '↩'
backbutton.addEventListener("click", function () {
    s3tos1();
})
    const addUserButton = document.createElement('button');
    addUserButton.classList.add('AddUser');
addUserButton.textContent = 'Add User';
addHtml(settingsButtonDiv,backbutton)
addHtml(settingsButtonDiv, addUserButton);

    const settingButton = document.createElement('button');
    settingButton.classList.add('Setting');
    settingButton.textContent = 'Settings';
            addHtml(settingsButtonDiv, settingButton);
            const SecondSecting = document.createElement("div");
            SecondSecting.id = "SEcondSection3";
            addHtml(section3,SecondSecting)
            addUserButton.addEventListener("click", function () {
                const variable1 = document.getElementById("SEcondSection3");
                variable1.innerHTML = '';
        const changeDiv = document.createElement('div');
        changeDiv.id = 'Change';
        addHtml(SecondSecting, changeDiv);
    
        const changeInput = document.createElement('input');
        // changeInput.id = 'i'
        changeInput.type = 'text';
        changeInput.placeholder = 'Wright Name that you want';
        addHtml(changeDiv, changeInput);
    
        const changeFileInput = document.createElement('input');
                changeFileInput.type = 'file';
                changeFileInput.id= 'SelctIimage'
        addHtml(changeDiv, changeFileInput);
                const Show = document.createElement("div");
                Show.classList.add("ShowAllDone");
                Show.setAttribute("id", "enw");
    // 🔥sumaw🌀, [6/22/2024 11:12 PM]
    const changeButton = document.createElement('button');
        changeButton.textContent = 'Submit';
                addHtml(changeDiv, changeButton);
                addHtml(changeDiv,Show)
                
                changeButton.addEventListener("click", function () {
                    const getClor = generatoColor();
                const AllC = document.createElement("div");
                let a = changeInput.value.trim();
                const all = document.createElement("div");
                if (!a) return;
                if (a.length > 10) return;
                if (a in UserAccounts) return;
                // if (Show.innerHTML.trim() !== '') {
                //     Show.innerHTML = '';
                // }
                if (Show.innerHTML !== '') {
                    x++;
                    let a = document.createElement("p");
                    a.textContent = "First Finish What You Start Submit or Clacele Sr.";
                    a.style.color = 'red'
                    if (x == 1) {
                        addHtml(changeDiv, a)
                        setTimeout(() => {
                            RHtml(changeDiv, a);
                            x = 0;
                        }, 1000);
                    }
                    return;
                }
                AllC.classList.add("ContainerForChck");
                const cont = document.createElement("div");
                cont.classList.add("ChckDiv")
                const cont_Span = document.createElement("span");
                const Cont_Text = document.createElement("div");
                Cont_Text.classList.add("TextChck");
                const contButtonDiv = document.createElement("div");
                contButtonDiv.classList.add("SencondChckButonDiv");
                const Cont_SubmitB = document.createElement("button");
                Cont_SubmitB.textContent = "Submit";
                const Cont_ClacelB = document.createElement("button")
                Cont_ClacelB.textContent = "Clance";
                    const SelctImage1 = document.getElementById('SelctIimage').files[ 0 ];
                    Cont_Text.textContent = a;
                    if (SelctImage1) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const dataUrl = e.target.result;
                            cont_Span.innerHTML = `<img src="${dataUrl}" alt="Selected Image" style="max-width: 100%; max-height: 100%;">`;
                        }
                        reader.readAsDataURL(SelctImage1);
                    }
                    else {  
                            cont_Span.textContent = a.slice(0, 1);    
                            FNAME.push(a.slice(0,1))
                    }
                addHtml(Show, AllC);
                addHtml(AllC, cont);
                addHtml(cont, cont_Span);
                addHtml(cont, Cont_Text);
                addHtml(AllC, contButtonDiv);
                addHtml(contButtonDiv, Cont_ClacelB);
                addHtml(contButtonDiv, Cont_SubmitB);
                Cont_ClacelB.addEventListener("click", function () {
                    RHtml(Show, AllC);
                })
                    Cont_SubmitB.addEventListener("click", function () {
                        const SelctImage = document.getElementById('SelctIimage').files[ 0 ];
                    const uniqId = generateUniqueId();
                    all.classList.add("oneAccount");
                        all.id = `##${a}`;
                        all.setAttribute('ids',a)
                    all.setAttribute('nest',uniqId)
                        const creat1 = document.createElement("span");
                        
                        if (SelctImage) {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                const dataUrl = e.target.result;
                                creat1.innerHTML = `<img id="IMG_${uniqId}9io_gmi" src="${dataUrl}" alt="Selected Image" style="max-width: 100%; max-height: 100%;">`;
                            }
                            reader.readAsDataURL(SelctImage);
                    }
                    else {
                        creat1.textContent = a.slice(0, 1);
                        creat1.style.backgroundColor = getClor;
                        all.setAttribute('sown',getClor)
                    }
                    if (a in UserAccounts) return;
                    console.log(UserAccounts)
                    const cerat = document.createElement("div");
                    cerat.classList.add("text")
                       T_animation(a,cerat,false)
                    addHtml(accountS, all);
                    addHtml(all, creat1);
                        addHtml(all, cerat);
                        try {
                            UserAccounts[ a ] = { Name: a,A_T:`@${a}`, Img: SelctImage, rem: uniqId, wanted: (SelctImage == undefined ? "" : `IMG_${uniqId}9io_gmi`) };
                            ReverseAccounts[ uniqId ] = { nest: a };
                            Account_textes[ `@${a}` ] = [];
                        Conversations[ a ] = [];
                        changeInput.value = ''; 
                            changeFileInput.value = '';
                    } catch (error) {
                        console.error(error)
                        document.location.reload();
                        }
                        s3tos1();
                    RHtml(Show, AllC);
                })
                

                    all.addEventListener("click", function () {
                        const newAll = document.getElementById(`${all.id}`);
                        const newSecondALL = all.getAttribute('ids');
                        const getnest = all.getAttribute('nest');
                        if (CuruntClick == newSecondALL) return;
                        if (!(newSecondALL in Conversations)) {
                            console.log("There is no name");
                            alert("There is no account in that name, it can be removed or changed");
                            if (confirm("do you want to delte this account that doesn't exist")) {
                                    try {
                                        console.log(getnest)
                                        const Org = ReverseAccounts[getnest].nest
                                        delete UserAccounts[ Org ]
                                        delete Conversations[Org]
                                    } catch (error) {
                                        alert("some thing bad happen: We must restart the page");
                                        setTimeout(() => {
                                            
                                        document.location.reload();
                                        }, 1000);
                                       
                                    }
                                RHtml(accountS, all);
                            }
                        }
                        else {
                            CuruntClick.pop();
                            CuruntClick.push(newSecondALL);
                            curuntclickStore.push(newSecondALL);
                            console.log(curuntclickStore)
                            section2_2.innerHTML = '';
                            s1tos2();
                            RHtml(section2, t);
                            document.location.hash = `ACC/&${CuruntClick}`
                            // section2.remove(t)
                            messageDisplay.innerHTML = '';
                            messageDisplay.id = 'MessDisplay';
                            messageDisplay.classList.add('MessDisplay');
                            s2uppertext.textContent = CuruntClick;
                            if (UserAccounts[ CuruntClick ].Img == undefined) {
                                s2upperimg.textContent = CuruntClick[0].slice(0,1);
                            }
                            if (UserAccounts[ CuruntClick ].Img !== undefined) {
                                try {
                                    const nast = document.getElementById(`IMG_${getnest}9io_gmi`);
                                s2upperimg.innerHTML = `<img src="${nast.src}">`;
                                } catch (error) {
                                    s2upperimg.innerHTML = '<img src="There is no img here">'
                                }
                                // UserAccounts[ CuruntClick ].Img = nast.src;
                            }
                            if (CuruntClick in Conversations) {
                                messageDisplay.innerHTML = Conversations[ CuruntClick ].join('');
                            }
                            IsAnswering = false;
            addHtml(section2_2, messageDisplay);
            
            const userAreaMessage = document.createElement('div');
            userAreaMessage.id = 'UserAreaMessage';
            addHtml(section2_2, userAreaMessage);
            
            const messageInput = document.createElement('textarea');
            messageInput.id = 'messageInput';
            messageInput.classList.add('InputText');
            messageInput.placeholder = 'Type Your Message...';
            addHtml(userAreaMessage, messageInput);
            
            const sendButton = document.createElement('button');
                            sendButton.innerHTML = '&blacktriangleleft;';
                            sendButton.id = 'answring'
            sendButton.addEventListener('click', sendMessage);
            addHtml(userAreaMessage, sendButton);
                            const RecordingButton = document.createElement("button");
                            const textsINRB = document.createElement("n1t");
                            addHtml(userAreaMessage, RecordingButton);
                            addHtml(RecordingButton, textsINRB);
                            textsINRB.textContent = '🎙️';
                            let zxv = 0;
                            let mediaRecorder;
                            let audioChunks = [];
                            RecordingButton.addEventListener("click", async () => {
                                zxv++;
                                let vs;
                                let vst = false
                                mediaRecorder;
                                if (zxv == 1) {
                                    vst = true
                                    textsINRB.textContent = '❌';
                                    RecordingButton.style = 'background:hsl(0, 100%, 70%);border-radius:100px';
                                    sendButton.disabled = true;
                                    userAreaMessage.style = 'background: linear-gradient(50deg,  rgb(255, 102, 102),rgb(98, 98, 228));'
                                    textsINRB.classList.add("nu89")
                                    messageInput.readOnly = true;
                                    vs = setInterval(() => {
                                        if (vst == false) {
                                            clearInterval(vs);
                                        }
                                        messageInput.value = 'RECORDING'
                                        setTimeout(() => {
                                    messageInput.value = `RECORDING.`;
                                            
                                        }, 200);
                                        setTimeout(() => {
                                    messageInput.value = `RECORDING..`;
                                        }, 500);
                                        setTimeout(() => {
                                    messageInput.value = `RECORDING...`;
                                        }, 700);
                                    }, 1000);
                                    messageInput.style = 'color:black;';
                                    //
                                     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                                     mediaRecorder = new MediaRecorder(stream);
                                    mediaRecorder.start();
                                    
                                    //
                                    audioChunks = [];
                                    //
                                    mediaRecorder.ondataavailable = (event) => {
                                        audioChunks.push(event.data);  
                                    };
                                    mediaRecorder.onstop = () => {
                                        // Create a Blob from the audio data
                                        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                                        const audioURL = URL.createObjectURL(audioBlob);
                                        clearInterval(vs)
                                        // Display the audio player with the recorded audio
                                        const audioPlayer = document.createElement('audio');
                                        audioPlayer.controls = true;
                                        audioPlayer.setAttribute("controls",'s')
                                        audioPlayer.playbackRate = true;
                                        audioPlayer.src = audioURL;
                                     // Show playback area
                                     const storySound = document.createElement("div");
                                        storySound.classList.add('storySound')
                                        const storySound1 = document.createElement("div");
                                        storySound.classList.add('storySound')
                                        addHtml(messageDisplay, storySound1);
                                        addHtml(storySound1, storySound);
                                        addHtml(storySound,audioPlayer)
                                        Conversations[CuruntClick].push(storySound1.innerHTML)
                                        // Set up the download link // Show download link
                                    };
                                } 
                                if (zxv > 1) {
                                    vst = false;
                                    zxv = 0;
                                    setTimeout(() => {
                                    messageInput.value = '';
                                    messageInput.value = '';
                                        
                                    }, 500);
                                    textsINRB.textContent = '🎙️';
                                    RecordingButton.style = '';
                                    userAreaMessage.style = '';
                                    textsINRB.classList.remove("nu89");
                                    messageInput.readOnly = false;
                                    sendButton.disabled = false;
                                    messageInput.style = '';
                                    mediaRecorder.stop();
                                    
                                }
                                console.log(zxv)
                            })
            }
                    })
            // s2upperback.addEventListener("")
           
                })
                // s2upperback.addEventListener('click', function () {
                //     s2tos1();
                // })
                s2upperback.addEventListener("dblclick", function () {
                    // s2tos1();
                    //     
                    if (curuntclickStore == '') {
                        s2tos1();
                        return;
                    };
    if (curuntclickStore.length == 0) { s2tos1(); return };
    const a = curuntclickStore.length;
    const b = a - 1;
    console.log(curuntclickStore[ b ]);
    CuruntClick.pop();
    CuruntClick.push(curuntclickStore[ b ]);
    curuntclickStore.pop(-1);
    const get_id = document.getElementById(`##${CuruntClick}`);
    const get_nest = get_id.getAttribute('nest');
    console.log(get_nest);
    const get_ids = get_id.getAttribute('ids');
    console.log(get_ids)
    if (!(get_ids in Conversations)) {
        console.log("There is no name");
        alert("There is no account in that name, it can be removed or changed");
        if (confirm("do you want to delte this account that doesn't exist")) {
                try {
                    console.log(get_nest)
                    const Org = ReverseAccounts[get_nest].nest;
                    delete UserAccounts[ Org ]
                    delete Conversations[Org]
                } catch (error) {
                    alert("some thing bad happen: We must restart the page");
                    setTimeout(() => {
                        
                    document.location.reload();
                    }, 1000);
                   
                }
            RHtml(accountS, all);
        }
    }
    else {
        section2_2.innerHTML = '';
        RHtml(section2, t);
        // section2.remove(t)
        messageDisplay.innerHTML = '';
        messageDisplay.id = 'MessDisplay';
        messageDisplay.classList.add('MessDisplay');
        s2uppertext.textContent = CuruntClick;
        if (UserAccounts[ CuruntClick ].Img == undefined) {
            s2upperimg.textContent = CuruntClick[0].slice(0,1);
        }
        if (UserAccounts[ CuruntClick ].Img !== undefined) {
            try {
                const nast = document.getElementById(`IMG_${get_nest}9io_gmi`);
            s2upperimg.innerHTML = `<img src="${nast.src}">`;
            } catch (error) {
                s2upperimg.innerHTML = '<img src="There is no img here">'
            }
            // UserAccounts[ CuruntClick ].Img = nast.src;
        }
        if (CuruntClick in Conversations) {
            messageDisplay.innerHTML = Conversations[ CuruntClick ].join('');
        }
addHtml(section2_2, messageDisplay);

const userAreaMessage = document.createElement('div');
userAreaMessage.id = 'UserAreaMessage';
addHtml(section2_2, userAreaMessage);

const messageInput = document.createElement('textarea');
messageInput.id = 'messageInput';
messageInput.classList.add('InputText');
messageInput.placeholder = 'Type Your Message...';
addHtml(userAreaMessage, messageInput);

const sendButton = document.createElement('button');
sendButton.innerHTML = '&blacktriangleleft;';
sendButton.addEventListener('click', sendMessage);
addHtml(userAreaMessage, sendButton);
    }

                })
                
    settingButton.addEventListener("click", function(){
        const Sec = document.getElementById("SEcondSection3")
        Sec.innerHTML = '';
        SecondSecting.innerHTML = '';
const ContainerD = document.createElement("div");
const BodyStyle = document.createElement("style");
ContainerD.classList.add("container");
        ContainerD.id = 'Tran';
        
        addHtml(Sec, ContainerD);
const form = document.createElement("div");
        form.classList.add("form");
        form.action = '/';
addHtml(ContainerD, form);

const label1 = document.createElement("label");
label1.setAttribute("for", "BackGroundColorGreen");
label1.textContent = 'GreenVlave';
const InputR1 = document.createElement("input");
InputR1.setAttribute("name", "Colors");
InputR1.id = 'BackGroundColorGreen';
InputR1.type = 'radio';
addHtml(form,label1)
addHtml(form,InputR1)
const label2 = document.createElement("label");
label2.setAttribute("for", "BackGroundColorBlue");
label2.textContent = 'blueviloate';
const InputR2 = document.createElement("input");
InputR2.setAttribute("name", "Colors");
InputR2.id = 'BackGroundColorBlue';
InputR2.type = 'radio';
addHtml(form,label2)
addHtml(form,InputR2)
const Button = document.createElement("button");
Button.type = 'Submit';
        Button.textContent = "Change";
        addHtml(form,Button)
        Button.addEventListener("click", function () {
    const PageNature = document.getElementById("PageNature")
    if (InputR1.checked) {
        PageNature.href = './style/n.css'
    } 
    if (InputR2.checked) {
        PageNature.href = ''
    } 
});
        // SecondSecting.textContent = 'Update Are Coming Soon';

    })
                
            })
    
    //searhc bar
    searchInput.addEventListener("input", function (target) {

       
    })
    //end of serch script
    // Function to send message
    function sendMessage() {
        const message1 = messageInput.value.trim();
        const formatted = checkAndAddSpaces(message1,20);
        const message = formatted; 
        
        if (message === '') return;
        if (!(CuruntClick in Conversations)) {
            console.warn(`There Is no file sellection ${message}`)
        }
        else {
            if (message.length > 2000) {
                alert("maximum is 400 letter sr");
                return;
            }
            let c = CuruntClick;
            let bas = `##${generateUniqueId()}`;
            // Add user message
            let bas2 = `@${c}`
            // const message_color = document.getElementById(CuruntClick);
            // const mess_collor = message_color.getAttribute('sown');
            const aDiv = document.createElement("div");
            const userMessageDiv = document.createElement('div');
            userMessageDiv.id = bas2;
            userMessageDiv.setAttribute('m_get_with_N', bas);
            Account_textes[bas2].push(bas)
        userMessageDiv.classList.add('UserMessage');
            userMessageDiv.textContent = message;
            // userMessageDiv.style.backgroundColor = mess_collor;
            addHtml(messageDisplay,aDiv)
            addHtml(aDiv, userMessageDiv);
            Conversations[c].push(aDiv.innerHTML)
            console.log(Conversations)
        messageInput.value = '';

// 🔥sumaw🌀, [6/22/2024 11:12 PM]
// Simulate AI response
            setTimeout(() => {
            const bDiv = document.createElement("div")
                const aiMessageDiv = document.createElement('div');
                const n1t = document.createElement('text');
                n1t.classList.add("outputDiv")
                const aiSymbole = document.createElement("span");
                aiSymbole.classList = 'aitex';
                aiSymbole.textContent = 'AI:';
                let rep;
                aiMessageDiv.classList.add('RobotMessage');
                switch (true) {
                    case message.toLowerCase() == "what is your name":
                        rep =  `My name is "${CuruntClick}".`;
                        break;
                    case message.trim().toLowerCase() == CuruntClick:
                        rep = `"${CuruntClick}" whta is thise name.`;
                        break;
                    case message == 'lorem':
                        rep = `<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere tenetur, tempora aut sed debitis, commodi tempore voluptates quod, aliquid ad est placeat. Nulla sed aspernatur rem rerum eveniet odit inventore.</p>`;
                        break;
                    case Number(message) !== NaN:
                           try {
                            const ans = eval(message);
                            rep = `AI: ${ans}`;
                           } catch (error) {
                            rep = `AI: You Math Quastion "${message}."`
                           }
                        break;
                
                    default:
                        rep = `AI: You Math Quastion "${message}."`
                        break;
                }

                    let notes = rep;
                    aiMessageDiv.textContent = ``;
              
                const addsdiv = document.createElement("div");
                IsAnswering = true;

                    addHtml(messageDisplay, bDiv);
                addHtml(bDiv, aiMessageDiv);
                addHtml(aiMessageDiv, n1t);
                const nsis = document.getElementById("answring")
                T_animation(notes,n1t,true,CuruntClick,bDiv)
                // Add one letter every 100ms
            }, 500);
        }
    }
});
// JSON.stringify(document)
    </script>
</html>
</body>